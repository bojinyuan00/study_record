可用的数据类型统计==》

Schema::table('users', function (Blueprint $table) {
    $table->string('email');
});

$table->bigIncrements('id');	等同于自增 UNSIGNED BIGINT（主键）列
$table->bigInteger('votes');	等同于 BIGINT 类型列
$table->binary('data');	等同于 BLOB 类型列
$table->boolean('confirmed');	等同于 BOOLEAN 类型列
$table->char('name', 4);	等同于 CHAR 类型列
$table->date('created_at');	等同于 DATE 类型列
$table->dateTime('created_at');	等同于 DATETIME 类型列
$table->dateTimeTz('created_at');	等同于 DATETIME 类型（带时区）列
$table->decimal('amount', 5, 2);	等同于 DECIMAL 类型列，带精度和范围
$table->double('column', 15, 8);	等同于 DOUBLE 类型列，带精度, 总共15位数字，小数点后8位
$table->enum('level', ['easy', 'hard']);	等同于 ENUM 类型列
$table->float('amount', 8, 2);	等同于 FLOAT 类型列，带精度和总位数
$table->geometry('positions');	等同于 GEOMETRY 类型列
$table->geometryCollection('positions');	等同于 GEOMETRYCOLLECTION 类型列
$table->increments('id');	等同于自增 UNSIGNED INTEGER （主键）类型列
$table->integer('votes');	等同于 INTEGER 类型列
$table->ipAddress('visitor');	等同于 IP 地址类型列
$table->json('options');	等同于 JSON 类型列
$table->jsonb('options');	等同于 JSONB 类型列
$table->lineString('positions');	等同于 LINESTRING 类型列
$table->longText('description');	等同于 LONGTEXT 类型列
$table->macAddress('device');	等同于 MAC 地址类型列
$table->mediumIncrements('id');	等同于自增 UNSIGNED MEDIUMINT 类型列（主键）
$table->mediumInteger('numbers');	等同于 MEDIUMINT 类型列
$table->mediumText('description');	等同于 MEDIUMTEXT 类型列
$table->morphs('taggable');	添加一个 UNSIGNED INTEGER 类型的 taggable_id 列和一个 VARCHAR 类型的 taggable_type 列
$table->multiLineString('positions');	等同于 MULTILINESTRING 类型列
$table->multiPoint('positions');	等同于 MULTIPOINT 类型列
$table->multiPolygon('positions');	等同于 MULTIPOLYGON 类型列
$table->nullableMorphs('taggable');	morphs() 列的 nullable 版本
$table->nullableTimestamps();	timestamps() 的别名
$table->point('position');	等同于 POINT 类型列
$table->polygon('positions');	等同于 POLYGON 类型列
$table->rememberToken();	等同于添加一个允许为空的 remember_token VARCHAR(100) 列
$table->smallIncrements('id');	等同于自增 UNSIGNED SMALLINT （主键）类型列
$table->smallInteger('votes');	等同于 SMALLINT 类型列
$table->softDeletes();	新增一个允许为空的 deleted_at TIMESTAMP 列用于软删除
$table->softDeletesTz();	新增一个允许为空的 deleted_at TIMESTAMP （带时区）列用于软删除
$table->string('name', 100);	等同于 VARCHAR 类型列，带一个可选长度参数
$table->text('description');	等同于 TEXT 类型列
$table->time('sunrise');	等同于 TIME 类型列
$table->timeTz('sunrise');	等同于 TIME 类型（带时区）
$table->timestamp('added_on');	等同于 TIMESTAMP 类型列
$table->timestampTz('added_on');	等同于 TIMESTAMP 类型（带时区）列
$table->timestamps();	添加允许为空的 created_at 和 updated_at TIMESTAMP 类型列
$table->timestampsTz();	添加允许为空的 created_at 和 updated_at TIMESTAMP 类型列（带时区）
$table->tinyIncrements('numbers');	等同于自增的 UNSIGNED TINYINT 类型列（主键）
$table->tinyInteger('numbers');	等同于 TINYINT 类型列
$table->unsignedBigInteger('votes');	等同于无符号的 BIGINT 类型列
$table->unsignedDecimal('amount', 8, 2);	等同于 UNSIGNED DECIMAL 类型列，带有总位数和精度
$table->unsignedInteger('votes');	等同于无符号的 INTEGER 类型列
$table->unsignedMediumInteger('votes');	等同于无符号的 MEDIUMINT 类型列
$table->unsignedSmallInteger('votes');	等同于无符号的 SMALLINT 类型列
$table->unsignedTinyInteger('votes');	等同于无符号的 TINYINT 类型列
$table->uuid('id');	等同于 UUID 类型列
$table->year('birth_year');	等同于 YEAR 类型列


修改列的属性类型
Schema::table('users', function (Blueprint $table) {
    $table->string('email')->nullable();
});

->after('column')	将该列置于另一个列之后 (MySQL)
->autoIncrement()	设置 INTEGER 列为自增主键
->charset('utf8')	指定数据列字符集（MySQL）
->collation('utf8_unicode_ci')	指定数据列字符序（MySQL/SQL Server）
->comment('my comment')	添加注释信息
->default($value)	指定列的默认值
->first()	将该列置为表中第一个列 (MySQL)
->nullable($value = true)	允许该列的值为 NULL
->storedAs($expression)	创建一个存储生成列（MySQL）
->unsigned()	设置 INTEGER 列为 UNSIGNED（MySQL）
->useCurrent()	设置 TIMESTAMP 列使用 CURRENT_TIMESTAMP 作为默认值
->virtualAs($expression)	创建一个虚拟生成列（MySQL）



更改数据列
要更改一个列，使用 Schema 构建器上的 dropColumn 方法，同样，在此之前，确保已经安装了 doctrine/dbal 依赖：
方法：composer require doctrine/dbal

Schema::table('users', function (Blueprint $table) {
    $table->string('name', 50)->change();
});
Schema::table('users', function (Blueprint $table) {
    $table->string('name', 50)->nullable()->change();
});

重命名列
Schema::table('users', function (Blueprint $table) {
    $table->renameColumn('from', 'to');
});

删除数据列
《单列》
Schema::table('users', function (Blueprint $table) {
    $table->dropColumn('votes');
});
《多列》
Schema::table('users', function (Blueprint $table) {
    $table->dropColumn(['votes', 'avatar', 'location']);
});


创建索引
$table->string('email')->unique();

Laravel 会自动生成合理的索引名称，不过你也可以传递第二个参数到该方法用于指定索引名称：例如==》
$table->index('email', 'unique_email');

索引类型
$table->primary('id');	添加主键索引
$table->primary(['id', 'parent_id']);	添加组合索引
$table->unique('email');	添加唯一索引
$table->index('state');	添加普通索引
$table->spatialIndex('location');添加空间索引（不支持SQLite）


mysql的索引类型
普通索引 ==》常用
唯一索引 ==》常用
主键索引 ==》常用
外键索引 ==》比较常用
复合索引 ==》不常用
全文索引 ==》文章类检索常用








